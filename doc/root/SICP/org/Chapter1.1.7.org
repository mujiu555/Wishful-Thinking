#+title: Chapter 1.1.7
#+author: 暮玖(github@mujiu555)

* 1.1.7 Example: Square Roots by Newton’s Method

Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective.

函数, 正如以上所介绍的, 很类似于原始的数理函数. 它们对于一个或多个参数有唯一确定的值. 但是它与数理函数有一个及其重要的区别. 函数必须有效.

As a case in point, consider the problem of computing square roots. We can define the square-root function as

一个例子是, 假设求解平方根. 我们可以定义一个平方根函数为:

#+begin_example
sqrt(x) = the y such that y >=(≥) 0 and y^2 = x .
#+end_example

This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp:

这个描述了一个完美的精确的数理函数. 我们可以用它去判断是否一个数是另一个数的平方根, 或者确定平方根的原始定理. 另一方面, 定义并没有描述一个过程. 事实上, 它几乎完全没有告诉事实上需要如何去找到一个给定数的平方根. 它不会帮助我们改述 pseudo-Lisp 中的定义:

#+begin_src scheme
(define (sqrt x)
  (the y (and (>= y 0)
              (= (square y) x))))
#+end_src

This only begs the question.

这只是重复了问题.

The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions[fn:1].

函数和过程的区别是在于描述事物属性和如何执行事物, 或, 正如它们有时会被代指的, 声明知识和命令知识, 之间普遍的区别的反映. 在数学中我们通常关心声明(是什么)描述, 而在计算机科学中我们通常关心命令式(如何)描述[fn:1].

How does one compute square roots? The most common way is to use Newton’s method of successive approximations, which says that whenever we have a guess y for the value of the square root of a number x , we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging y with x / y [fn:2]. For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:

如何计算一个平方根? 最通常的方法是用牛顿法的逼近归约, 一个无论我们什么时候猜测 y 是一个数 x 的平方根, 我们都可以执行一个简单的乘法得到一个更好的猜测(一个更接近事实上平方根的数), 通过用 x/y 来平均 y[fn:2]. 如, 当我们想要用以上方法求得 2 的平方根. 假设我们最开始的猜测是 1:

| :Guess: | :Quotient:           | :Average:                      |
|---------+----------------------+--------------------------------|
|       1 | (2/1)  = 2           | ((2 + 1)/2)  = 1.5             |
|     1.5 | (2/1.5) = 1.3333     | ((1.3333 + 1.5)/2) = 1.4167    |
|  1.4167 | (2/1.4167)  = 1.4118 | ((1.4167 + 1.4118)/2) = 1.4142 |
|  1.4142 | ...                  | ...                            |

Continuing this process, we obtain better and better approximations to the square root.

继续执行这个进程, 我们就可以获得这个平方根越来越接近的估测值.

Now let’s formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:

现在我们来使用过程的形式来格式化这个过程. 我们用一个用于被开方的数(一个我们试图求得它的平方根的数)和一个用于猜测(平方根)的数开始. 如果这个猜测对于我们的目的已经足够好了, 我们就结束; 否则, 我们必须重复这个进程, 用一个更好的猜测. 我们将这个基本的策略写成一个过程:

#+begin_src scheme
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
#+end_src

A guess is improved by averaging it with the quotient of the radicand and the old guess:

这个猜测通过取用被开方数和原始的猜测的平均的商来提升:

#+begin_src scheme
(define (improve guess x)
  (average guess (/ x guess)))
#+end_src

where

而 average 是

#+begin_src scheme
(define (average x y)
  (/ (+ x y) 2))
#+end_src

We also have to say what we mean by “good enough.” The following will do for illustration, but it is not really a very good test. (See [[Exercise 1.7:][Exercise 1.7]] .) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001)[fn:3]:

我们也需要确定什么是 "足够好". 以下将会展示, 但它不是一个真的足够好的测试. (见 [[Exercise 1.7:][Exercise 1.7]]) 这里的想法是改进答案, 直到它的平方减去被开方数小于一个提前确定的限度(这里是 0.001)[fn:3]:

#+begin_src scheme
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))
#+end_src

Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:[fn:4]

最后我们需要一个开始的方式. 例如, 我们可以永远假设任何数的平方根是 1[fn:4]:

#+begin_src scheme
(define (sqrt x)
  (sqrt-iter 1.0 x))
#+end_src

If we type these definitions to the interpreter, we can use *sqrt* just as we can use any procedure:

如果我们将那些定义键入到解释器, 我们就可以像我们使用任何函数一样使用 sqrt 了:

#+begin_src scheme
(sqrt 9)
3.00009155413138

(sqrt (+ 100 37))
11.704699917758145

(sqrt (+ (sqrt 2) (sqrt 3)))
1.7739279023207892

(square (sqrt 1000))
1000.000369924366
#+end_src

The *sqrt* program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. *Sqrt-iter*, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure[fn:5].

这个 sqrt 的程序也展示了我们目前已经介绍过的简单的过程语言是完全足够用于写下任何完全数值可以被写于, 如, c 或 pascal, 的程序. 这也许是令人惊讶的, 既然我们并没有在我们的语言中包含任何让计算机重复执行某些事物的迭代(循环)结构. Sqrt-iter, 另一方面, 展示了在不使用任何除了调用函数以外的特殊结构时是如何实现迭代的[fn:5].

**** Exercise 1.6:
Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

Alyssa P. Hacker 没有明白为什们 if 需要被视为特殊形式. "为什们不能只是把它定义为普通的 cond 形式的函数?" 她(?)问. Alyssa 的朋友 Eva Lu Ator 表明这确实可以被实现, 并且她定义了一个新的 if:

    #+begin_src scheme
    (define (new-if predicate
                    then-clause
                    else-clause)
      (cond (predicate then-clause)
            (else else-clause)))
    #+end_src

    Eva demonstrates the program for Alyssa:

    Eva 向 Alyssa 展示了这个程序:

    #+begin_src scheme
    (new-if (= 2 3) 0 5)
    5

    (new-if (= 1 1) 0 5)
    0
    #+end_src

    Delighted, Alyssa uses new-if to rewrite the square-root program:

    Alyssa 很高兴使用 new-if 去重写平方根程序:

    #+begin_src scheme
    (define (sqrt-iter guess x)
      (new-if (good-enough? guess x)
              guess
              (sqrt-iter (improve guess x) x)))
    #+end_src

    What happens when Alyssa attempts to use this to compute square roots? Explain.
    当 Alyssa 试图用这个程序计算平方根时, 会发生什么? 请解释.

**** Exercise 1.7:
The *good-enough?* test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing *good-enough?* is to watch how *guess* changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

被用于计算平方根的 good-enough? 测试并不是很适合用于找到一个非常小的数的平方根. 并且, 在现实计算机中, 数值运算几乎都是在受限的精度下被执行的. 这使得我们的测试对于非常大的数也不充分. 解释那些声明(命题), 并用例子展示这个测试在面对非常小或非常大的数时是如何失效的. 另一个实现 good-enough?的方式是观察 guess 如何从一个迭代转移到另一个迭代, 并且当这个变化是猜测的极小部分时停止. 设计一个 square-root 函数, 使用这种停止测试的方法. 这对于极小和极大的数是否会更好?

**** Exercise 1.8:
Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x , then a better approximation is given by the value

牛顿法(牛顿迭代)算立方根基于如果 y 是 x 的立方根的估值, 那么更好的估值是由如下值给出的, 这一定理

    #+begin_example
        x / y^2 + 2 y
        ------------- .
              3
    #+end_example

    Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In [[file:Chapter1.3.4.org][1.3.4]] we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)
    使用这个公式实现一个类似与平方根函数的立方根函数. (在 [[file:Chapter1.3.4.org][1.3.4]] 节我们将会看到如何实现一个普遍的对于平方根和立方根的抽象的牛顿法函数)


* Footnotes

[fn:5] Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on “tail recursion” in [[file:Chapter1.2.org][1.2.1]].
[fn:5] 担心函数调用实现的迭代的效率问题的读者, 需要注意 [[file:Chapter1.2.1.org][1.2.1]] 节的 "尾递归".

[fn:4] Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in [[file:Chapter2.1.org][2.1.1]].) If we start with an initial guess of 1 in our square-root program, and x is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals.
[fn:4]  观察到我们用 1.0 表示我们最开始的猜测, 而不是 1. 这在大部分 Lisp 实现中并不会存在任何差异. 然而 MIT Scheme 会区分精确整数和十进制值, 并且两个整数的除法会给出一个有理数, 而不是一个十进制数. 如, 10 除以 6 得到 5/3, 而 10.0 除以 6.0 得到 1.6666666666666667. (我们将要在 [[file:Chapter2.1.1.org][2.1.1]] 节学习如何实现有理数的算术运算) 如果我们以 1 作为我们 square-root 程序的最初猜测, 那么 x 就是一个精确整数, 任何后续由 square-root 算出的值都是有理数而不是十进制数. 有理数和十进制数的运算结果总是十进制数, 所以最开始猜测的 1.0 使得所有后续的值都是十进制.

[fn:3] We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character.
[fn:3] 我们通常会在谓词名字的末尾放一个问号, 来帮助我们记住, 这是一个谓词. 这只是一个分格上的习惯. 对于解释器来说, 问号只是一个普通的字符.

[fn:2] This square-root algorithm is actually a special case of Newton’s method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton’s method as a Lisp procedure in [[file:Chapter1.3.org][1.3.4]].
[fn:2] 这个平方根算法事实上是牛顿迭代, 一个用于找到等式根的方法, 的一个特例. 平方根算法本身是由 Alexandria 的 Heron 在公元前一世纪确定的. 我们将要在 [[file:Chapter1.3.org][1.3.4]] 节了解如何用 Lisp 函数表示通用的牛顿迭代法.

[fn:1] Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is “correct” is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given “what is” knowledge specified by the programmer, they can generate “how to” knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in [[file:Chapter4.org][Chapter 4]].
[fn:1] 声明和命令描述是紧密联系的, 正如数学和计算机科学. 例如, 当为了确定一个程序产生的结果是 "正确的" 时需要作出一个对于这个程序的声明式定义. 有大量研究致力于确定一个可以证明程序是正确的的技术, 并且大部非这个技术的难点在于需要达成从命令式断言(从程序如何组织的)和声明式断言(用于推断事物)之间的转换的协商. 在一个相关的分支中, 一个现如今编程语言设计的一个重要领域是对程序用声明式写就, 被称作非常高级语言的探索. 这种想法在于使解释器足够精妙, 以至于程序员给出一个 "什么是" 的信息, 它们就可以自动产生 "如何去" 的知识. 这无法以通用方式完成, 但是那是一个已经有进度被完成了的领域. 我们将在第 [[file:Chapter4.org][4]] 章中重新了解它.


