#+title: Chapter 1.2.6
#+author: 暮玖(github@mujiu555)

* 1.2.6 Example: Testing for Primality

This section describes two methods for checking the primality of an integer n ,
one with order of growth Θ(sqrt(n)) ,
and a “probabilistic” algorithm with order of growth Θ(log⁡n) .
The exercises at the end of this section suggest programming projects based on these algorithms.

本节描述了两种检查整数 n 的素性的方法,
一种的增长阶为 Θ(sqrt(n)),
另一种是增长阶为 Θ(log n)的“概率”算法.
本节末尾的练习是基于这些算法的编程项目 [fn:6].

** Searching for divisors

Since ancient times, mathematicians have been fascinated by problems concerning prime numbers,
and many people have worked on the problem of determining ways to test if numbers are prime.
One way to test if a number is prime is to find the number’s divisors.
The following program finds the smallest integral divisor (greater than 1) of a given number n .
It does this in a straightforward way,
by testing n for divisibility by successive integers starting with 2.

自古以来, 数学家们就对素数相关的问题充满了兴趣,
许多人致力于研究确定数字是否为素数的方法.
一种测试一个数字是否为素数的方法是寻找该数字的因子.
以下程序找到给定数 n 的最小整数因子(大于 1).
它通过从 2 开始逐个测试 n 是否能被后续整数整除,
以一种直接的方式实现这一目标。

#+begin_src scheme
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n)
         n)
        ((divides? test-divisor n)
         test-divisor)
        (else (find-divisor
               n
               (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))
#+end_src

We can test whether a number is prime as follows:
n is prime if and only if n is its own smallest divisor.

我们可以通过以下方式测试一个数字是否为素数:
当且仅当 n 是它自身的最小因子时，n 才是素数。

#+begin_src scheme
(define (prime? n)
  (= n (smallest-divisor n)))
#+end_src

The end test for *find-divisor* is based on the fact that
if n is not prime it must have a divisor less than or equal to sqrt(n) [fn:1].
This means that the algorithm need only test divisors between 1 and sqrt(n) .
Consequently,
the number of steps required to identify n as prime will have order of growth Θ(sqrt(n)) .

find-divisor 的最终测试基于这样一个事实:
如果 n 不是素数，它必定有一个小于或等于 sqrt(n) 的因子 [fn:1].
这意味着算法只需测试 1 到 sqrt(n) 之间的因子.
因此，识别 n 为素数所需的步骤数量的增长阶将为 Θ(sqrt(n)) .

** The Fermat test 费马测试

The Θ(log⁡n) primality test is based on a result from number theory known as Fermat’s Little Theorem[fn:2].

Θ(log n) 的素性测试基于一个来自数论的结果,
称为费马小定理[fn:2].

    _Fermat’s Little Theorem_: If n is a prime number and a is any positive integer less than n , then a raised to the n^th power is congruent to a modulo n .

    费马小定理: 如果 n 是一个素数, a 是任何小于 n 的正整数, 则 a 的 n 次幂与 a 在模 n 下同余.
    (n is prime, a < n => a^n % n = a % n) [fn:8]

(Two numbers are said to be /congruent modulo/ n if they both have the same remainder when divided by n .
The remainder of a number a when divided by n is also referred to as the /remainder of a modulo n/ ,
or simply as /a modulo n/ .)

(如果两个数在除以 n 时都有相同的余数,
则称这两个数在模 n 下是 "同余的".
一个数 a 除以 n 的余数也称为 "a 在模 n 下的余数",
或简单地称为 "a 模 n".)

If n is not prime, then, in general, most of the numbers a < n will not satisfy the above relation.
This leads to the following algorithm for testing primality:
Given a number n , pick a random number a < n and compute the remainder of a^n modulo n .
If the result is not equal to a , then n is certainly not prime.
If it is a , then chances are good that n is prime.
Now pick another random number a and test it with the same method.
If it also satisfies the equation, then we can be even more confident that n is prime.
By trying more and more values of a , we can increase our confidence in the result.
This algorithm is known as the Fermat test.

如果 n 不是素数, 那么一般来说, 大多数小于 n 的数 a 将不满足上述关系.
这得到了以下素性测试算法:
给定一个数 n, 随机选择一个小于 n 的数 a, 并计算 a^n 在模 n 下的余数.
如果结果不等于 a，那么 n 当然不是素数.
如果结果等于 a，那么 n 可能是素数.
接下来再选择另一个随机数 a, 并用相同的方法进行测试.
如果它也满足这个方程, 那么我们可以更有信心地认为 n 是素数.
通过尝试越来越多的 a 值, 我们可以增加对结果的信心.
这个算法被称为费马测试.

To implement the Fermat test,
we need a procedure that computes the exponential of a number modulo another number:

为了实现费马测试,
我们需要一个计算一个数的指数模另一个数的值的函数:

#+begin_src scheme
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
#+end_src

This is very similar to the fast-expt procedure of [[file:Chapter1.1.4.org][1.2.4]].
It uses successive squaring, so that the number of steps grows logarithmically with the exponent[fn:3].

这与 [[file:Chapter1.1.4.org][1.2.4]] 中的快速指数程序非常相似.
它使用连续平方，因此步骤的数量随着指数的增长而以对数方式增加[fn:3].

The Fermat test is performed by choosing at random a number a
between 1 and n − 1 inclusive and checking
whether the remainder modulo n of the n^th power of a is equal to a .
The random number a is chosen using the procedure *random*,
which we assume is included as a primitive in Scheme.
*Random* returns a nonnegative integer less than its integer input.
Hence, to obtain a random number between 1 and n − 1 ,
we call *random* with an input of n − 1 and add 1 to the result:

费马测试通过随机选择一个在 1 到 n−1（包括 1 和 n−1）之间的数字 a,
并检查 a 的 n 次幂在模 n 下的余数是否等于 a 来进行的.
随机数 a 是使用我们假设作为原语被包含在 Scheme 中的函数 random 选择的.
random 返回一个小于其整数输入的非负整数.
因此, 为了获得一个在 1 到 n−1 之间的随机数,
我们通过 n−1 调用 random, 并将结果加 1:

#+begin_src scheme
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
#+end_src

The following procedure runs the test a given number of times,
as specified by a parameter.
Its value is true if the test succeeds every time, and false otherwise.

如下函数根据给定次数运行这个测试,
如果均成功则值为真, 否则为否.

#+begin_src scheme
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n)
         (fast-prime? n (- times 1)))
        (else false)))
#+end_src

** Probabilistic methods

The Fermat test differs in character from most familiar algorithms,
in which one computes an answer that is guaranteed to be correct.
Here, the answer obtained is only probably correct.
More precisely, if n ever fails the Fermat test,
we can be certain that n is not prime.
But the fact that n passes the test, while an extremely strong indication,
is still not a guarantee that n is prime.
What we would like to say is that for any number n ,
if we perform the test enough times and find that n always passes the test,
then the probability of error in our primality test can be made as small as we like.

费马测试的性质与大多数熟悉的算法不同,
在这些算法中, 计算得到的答案可以保证是正确的.
在这里, 得到的答案只是可能正确.
更准确地说, 如果 n 在费马测试中失败, 我们可以确定 n 不是素数.
但 n 通过测试这一事实, 虽然是一个极强的指示, 仍不能保证 n 是素数.
我们想要说的是, 对于任何数 n,
如果我们进行足够多次测试并发现 n 始终通过测试,
那么我们素性测试中的错误概率可以被降低到我们希望的程度.

Unfortunately, this assertion is not quite correct.
There do exist numbers that fool the Fermat test:
numbers n that are not prime and yet have the property that
a^n is congruent to a modulo n for all integers a < n .
Such numbers are extremely rare,
so the Fermat test is quite reliable in practice[fn:4].

不幸的是, 这一判断并不完全正确.
确实存在一些可以欺骗费马测试的数:
那些不是素数而具有这样的性质的数 n,
对于所有小于 n 的整数 a, a 的 n 次幂在模 n 下与 a 同余.
这类数字非常稀少, 因此在实践中, 费马测试是相当可靠的[fn:4].

There are variations of the Fermat test that cannot be fooled.
In these tests, as with the Fermat method,
one tests the primality of an integer n by choosing a random integer a < n
and checking some condition that depends upon n and a .
(See [[Exercise 1.28:]] for an example of such a test.)
On the other hand, in contrast to the Fermat test, one can prove that,
for any n , the condition does not hold for most of the integers a < n unless n is prime.
Thus, if n passes the test for some random choice of a ,
the chances are better than even that n is prime.
If n passes the test for two random choices of a ,
the chances are better than 3 out of 4 that n is prime.
By running the test with more and more randomly chosen values of a
we can make the probability of error as small as we like.

有一些费马测试的变体是不会被欺骗的.
在这些测试中, 就像费马方法一样,
通过选择一个小于 n 的随机整数 a,
并检查一个依赖于 n 和 a 的条件来测试整数 n 的素性.
（参见 [[Exercise 1.28:]] 以获取此类测试的示例）
另一方面, 与费马测试不同的是,
可以证明, 对于任何 n, 除非 n 是素数, 否则该条件对大多数小于 n 的整数 a 不成立.
因此, 如果 n 对某个随机选择的 a 通过测试,
那么 n 是素数的概率大于 1/2.
如果 n 对两个随机选择的 a 通过测试,
那么 n 是素数的概率大于 3/4.
通过使用越来越多随机选择的 a 值进行测试,
我们可以将错误概率降低到我们希望的任意小.

The existence of tests for
which one can prove that the chance of error becomes arbitrarily small
has sparked interest in algorithms of this type,
which have come to be known as probabilistic algorithms.
There is a great deal of research activity in this area,
and probabilistic algorithms have been fruitfully applied to many fields [fn:5].

能够证明错误概率可以任意小的测试的存在,
引发了人们对这类算法的兴趣,
这些算法被称为概率算法.
在这一领域有大量的研究活动,
概率算法已成功应用于许多领域[fn:5].

**** Exercise 1.21:
    Use the *smallest-divisor* procedure to find the smallest divisor of each of the following numbers:
    199, 1999, 19999.

    使用 smallest-divisor 函数去找到如下数的最小因数:
    199, 1999, 19999.

**** Exercise 1.22:
    Most Lisp implementations include a primitive called *runtime* that returns an integer
    that specifies the amount of time the system has been running (measured, for example, in microseconds).
    The following *timed-prime-test* procedure,
    when called with an integer n ,
    prints n and checks to see if n is prime.
    If n is prime,
    the procedure prints three asterisks followed by the amount of time used in performing the test.

    大部分 Lisp 实现都有一个被称作 runtime 的原语, 返回一个确定了系统运行时间的整数(以, 例如, 微秒作单位).
    当如下 timed-prime-test 函数用整数 n 调用时, 会输出 n, 并检查 n 是否为一个素数.
    如果 n 是一个素数, 这个函数会输出三个星号,
    紧跟执行这个测试所用的时间.

    #+begin_src scheme
    (define (timed-prime-test n)
      (newline)
      (display n)
      (start-prime-test n (runtime)))

    (define (start-prime-test n start-time)
      (if (prime? n)
          (report-prime (- (runtime)
                           start-time))))

    (define (report-prime elapsed-time)
      (display " *** ")
      (display elapsed-time))
    #+end_src

    Using this procedure,
    write a procedure *search-for-primes* that checks the primality of consecutive odd integers in a specified range.
    Use your procedure to find the three smallest primes larger than 1000;
    larger than 10,000;
    larger than 100,000;
    larger than 1,000,000.
    Note the time needed to test each prime.
    Since the testing algorithm has order of growth of Θ(sqrt(n)) ,
    you should expect that testing for primes around 10,000 should take about
    sqrt(10) times as long as testing for primes around 1000.
    Do your timing data bear this out?
    How well do the data for 100,000 and 1,000,000 support the Θ(sqrt(n)) prediction?
    Is your result compatible with the notion
    that programs on your machine run in time proportional to
    the number of steps required for the computation?

    使用此程序,
    编写一个名为 search-for-primes 的函数,
    检查指定范围内连续奇数的素性.
    使用你的函数找到三个大于
    1000, 1,0000, 10,0000 和 100,0000
    的最小素数.
    注意测试每个素数所需的时间.
    由于测试算法的增长阶为 Θ(√n),
    你应该预期测试 10,000 左右的素数所需的时间
    大约是测试 1,000 左右的素数所需时间的 √10 倍.
    你的计时数据是否支持这一点?
    对于 100,000 和 1,000,000 的数据在多大程度上支持 Θ(√n) 的预测?
    你的结果是否与程序在你的机器上运行所需时间
    与计算所需步骤数量成正比的概念相符？

**** Exercise 1.23:
    The *smallest-divisor* procedure shown at the start of this section does lots of needless testing:
    After it checks to see if the number is divisible by 2
    there is no point in checking to see if
    it is divisible by any larger even numbers.
    This suggests that the values used for *test-divisor* should not be 2, 3, 4, 5, 6, …,
    but rather 2, 3, 5, 7, 9, ….
    To implement this change, define a procedure next that returns 3 if its input is equal to 2 and otherwise returns its input plus 2.
    Modify the *smallest-divisor* procedure to use *(next test-divisor)* instead of *(+ test-divisor 1)*.
    With *timed-prime-test* incorporating this modified version of *smallest-divisor*,
    run the test for each of the 12 primes found in [[Exercise 1.22:]].
    Since this modification halves the number of test steps,
    you should expect it to run about twice as fast.
    Is this expectation confirmed?
    If not, what is the observed ratio of the speeds of the two algorithms,
    and how do you explain the fact that it is different from 2?

    本节开头展示的 smallest-divisor 函数进行了许多不必要的测试:
    在检查一个数字是否能被 2 整除后,
    再检查它是否能被任何(其他)更大的偶数整除是没有意义的.
    这表明用于 test-divisor 的值不应该是
    2, 3, 4, 5, 6, …,
    而应该是 2, 3, 5, 7, 9, ….
    为了实现这一变化,
    定义一个函数 next, 当其输入等于 2 时返回 3, 否则返回其输入加 2.
    修改最小除数程序,
    使用 (next test-divisor) 代替 (+ test-divisor 1).
    在包含这个修改版 smallest-divisor 的 timed-prime-test 中,
    对 [[Exercise 1.22:][练习 1.22]] 中找到的 12 个素数进行测试.
    由于这一修改将测试步骤的数量减半,
    你应该预期它的运行速度大约快两倍.
    这个预期是否成立?
    如果没有, 两个算法的速度比率是多少?
    你如何解释这个比率与 2 不同的事实?

**** Exercise 1.24:
    Modify the *timed-prime-test* procedure of [[Exercise 1.22:]] to use *fast-prime?* (the Fermat method),
    and test each of the 12 primes you found in that exercise.
    Since the Fermat test has Θ(log⁡n) growth,
    how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000?
    Do your data bear this out?
    Can you explain any discrepancy you find?

    修改 [[Exercise 1.22:][练习 1.22]] 中的 timed-prime-test 函数,
    以使用 fast-prime? (费马方法),
    并测试你在该练习中找到的 12 个素数.
    由于费马测试的增长阶为 Θ(log n),
    你预期测试 100,0000 左右的素数所需的时间
    与测试 1000 左右的素数所需的时间
    相比如何?
    你的数据是否支持这一点?
    你能否解释任何出现的差异?

**** Exercise 1.25:
    Alyssa P. Hacker complains that we went to a lot of extra work in writing *expmod*.
    After all, she says,
    since we already know how to compute exponentials,
    we could have simply written

    Alyssa P. Hacker 抱怨我们在编写 expmod 时做了很多额外的工作.
    毕竟, 她说,
    既然我们已经知道如何计算指数,
    我们可以简单地(将 expmod)写成:

    #+begin_src scheme
    (define (expmod base exp m)
      (remainder (fast-expt base exp) m))
    #+end_src

    Is she correct?
    Would this procedure serve as well for our fast prime tester? Explain.

    她是否正确?
    这个函数是否同样适用于我们的快速素数测试?
    请解释.

**** Exercise 1.26:
    Louis Reasoner is having great difficulty doing [[Exercise 1.24:]].
    His *fast-prime?* test seems to run more slowly than his *prime?* test.
    Louis calls his friend Eva Lu Ator over to help.
    When they examine Louis’s code,
    they find that he has rewritten the *expmod* procedure
    to use an explicit multiplication,
    rather than calling *square*:

    Louis Reasoner 在做 [[Exercise 1.24:][练习 1.24]] 时遇到了很大的困难.
    他的 fast-prime? 测试似乎比 prime? 测试运行得更慢.
    Louis 叫来他的朋友 Eva Lu Ator 帮忙.
    当他们检查 Louis 的代码时,
    发现他重写了 expmod 函数,
    使用了显式的乘法,
    而不是调用 square:

    #+begin_src scheme
    (define (expmod base exp m)
      (cond ((= exp 0) 1)
            ((even? exp)
             (remainder
              (* (expmod base (/ exp 2) m)
                 (expmod base (/ exp 2) m))
              m))
            (else
             (remainder
              (* base
                 (expmod base (- exp 1) m))
              m))))
    #+end_src

    “I don’t see what difference that could make,” says Louis.
    “I do.” says Eva. “By writing the procedure like that, you have transformed the Θ(log⁡n) process into a Θ(n) process.”
    Explain.

    "我不明白这有什么区别," Louis 说.
    "我明白," Eva 说. "编写这样的函数, 你已经将 Θ(log n) 的进程变成了 Θ(n) 的."
    请解释.

**** Exercise 1.27:
    Demonstrate that the Carmichael numbers listed in [fn:4] really do fool the Fermat test.
    That is, write a procedure that takes an integer n
    and tests whether a^n is congruent to a modulo n for every a < n ,
    and try your procedure on the given Carmichael numbers.

    证明 [fn:4] 中列出的卡迈克尔数确实能欺骗费马测试.
    即, 编写一个函数, 该函数接受一个整数 n,
    并测试对每一个 a < n, a^n 是否与 a 模 n 同余,
    并尝试用给定的卡迈克尔数测试你的函数。

**** Exercise 1.28:
    One variant of the Fermat test that cannot be fooled is called the /Miller-Rabin test/ ([[file:References.org][Miller 1976]]; [[file:References.org][Rabin 1980]]).
    This starts from an alternate form of Fermat’s Little Theorem,
    which states that if n is a prime number and a is any positive integer less than n ,
    then a raised to the (n−1)-st power is congruent to 1 modulo n .
    To test the primality of a number n by the Miller-Rabin test,
    we pick a random number a < n
    and raise a to the (n−1)-st power modulo n using the *expmod* procedure.
    However, whenever we perform the squaring step in *expmod*,
    we check to see if we have discovered a “nontrivial square root of 1 modulo n ,”
    that is,
    a number not equal to 1 or n−1 whose square is equal to 1 modulo n .
    It is possible to prove that if such a nontrivial square root of 1 exists,
    then n is not prime.
    It is also possible to prove that if n is an odd number that is not prime,
    then, for at least half the numbers a < n ,
    computing a^{n−1} in this way will reveal a nontrivial square root of 1 modulo n .
    (This is why the Miller-Rabin test cannot be fooled.)
    Modify the *expmod* procedure to signal if it discovers a nontrivial square root of 1,
    and use this to implement the Miller-Rabin test with a procedure analogous to *fermat-test*.
    Check your procedure by testing various known primes and non-primes.
    Hint: One convenient way to make *expmod* signal is to have it return 0.

    一个不能被欺骗的费马测试的变体称为米勒-拉宾测试 ( [[file:References.org][Miller 1976]]; [[file:References.org][Rabin 1980]] ).
    这个测试基于费马小定理的另一种形式,
    它指出, 如果 n 是一个质数, a 是任何小于 n 的正整数,
    那么 a 的 n−1 次幂与 1 模 n 同余.
    (n is prime, Any a < n, a^{n-1} === 1 (mod n))
    (x^2 - 1 === 0 (mod n) -> (x+1)(x-1) === 0 (mod n))
    (- p|(x+1)(x-1) ->)
    ((x-1) == 0 or (x+1)(x-1) == m*n)
    (-> x1 = 1, x2 = n-1)
    为了使用米勒-拉宾测试来测试一个数 n 的素性,
    我们选择一个随机数 a < n, 并使用 expmod 计算 a 的 (n−1) 次幂模 n.
    然而, 在 expmod 过程中每次执行平方步骤时,
    我们都会检查是否发现了 "1 模 n 的的非平凡平方根",
    即, 一个不等于 1 或 n−1 且其平方等于 1 模 n 的数.
    (Any x != 1 and x != n-1, x^2 === 1 (mod n))
    可以证明, 如果存在这样的非平凡平方根, 那么 n 就不是质数.
    还可以证明, 如果 n 是一个非质数的奇数,
    那么, 对于至少有一半的 a < n,
    在以这种方式计算 a^{n−1} 时会得出 1 模 n 的非平凡平方根.
    (这就是为什么米勒-拉宾测试不能被欺骗.)
    修改 expmod 过程, 使其在发现 1 模 n 的非平凡平方根时发出信号,
    并使用这种方法实现类似于 fermat-test 的米勒-拉宾测试.
    通过检查已知的质数和非质数来检查你的函数.
    提示: expmod 发信的一个简单方法是返回 0.
    ([fn:7] .)

* Footnotes

[fn:8] Reference: [[https://zhuanlan.zhihu.com/p/75685377][Zhihu: 同余运算和费马小定理的证明]]
[fn:7] Reference: [[https://zhuanlan.zhihu.com/p/349360074][Zhihu: 朝夕的ACM笔记]]

[fn:6] 其实还有两种线性复杂度(O(n))的方法, 分别为欧拉筛和埃氏筛, 欧不, 它们是求出素数的方法, 不过求出素数是不是也可以判断素性呢~ XD, 与之相关的, 还有 O(n log n) 复杂度的方法, 也即除以小于其 sqrt(n) 大小的素数以判断是否存在因数

[fn:5] One of the most striking applications of probabilistic prime testing has been to the field of cryptography. Although it is now computationally infeasible to factor an arbitrary 200-digit number, the primality of such a number can be checked in a few seconds with the Fermat test. This fact forms the basis of a technique for constructing “unbreakable codes” suggested by [[file:References.org][Rivest et al. (1977)]]. The resulting RSA algorithm has become a widely used technique for enhancing the security of electronic communications. Because of this and related developments, the study of prime numbers, once considered the epitome of a topic in “pure” mathematics to be studied only for its own sake, now turns out to have important practical applications to cryptography, electronic funds transfer, and information retrieval.
[fn:5] 概率质数测试的一个最引人注目的应用是在密码学领域. 尽管现在在计算上无法在合理时间内分解一个任意的 200 位数, 但它的素性可以在几秒内被费马测试确定. 这一事实是由 Rivest 等（1977）提出的构建 "不可破解的密码" 技术的基础. 由此产生的 RSA 算法已成为广泛使用于增强电子通信安全的技术. 由于这一及相关的发展, 质数的研究---曾经被认为是“纯”数学的一个典型课题, 仅为了其自身的价值而被研究---现在在密码学, 电子资金转账和信息检索等方面具有重要的实际应用.

[fn:4] Numbers that fool the Fermat test are called Carmichael numbers, and little is known about them other than that they are extremely rare. There are 255 Carmichael numbers below 100,000,000. The smallest few are 561, 1105, 1729, 2465, 2821, and 6601. In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that cosmic radiation will cause the computer to make an error in carrying out a “correct” algorithm. Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between mathematics and engineering.
[fn:4] 能够欺骗费马测试的数被称作卡迈克尔数, 并且除了它们极其罕见, 人们对其没有其他了解. 在 1,0000,0000 之下有 255 个卡迈克尔数. 最小的几个是 561, 1105, 1729, 2465, 2821, 和 6601. 在测试随机非常大数的素性时, 选取到可以欺骗费马测试的值的概率, 小于宇宙射线影响计算机算错一个正确算法的概率. 因为主要问题而非次要问题而认为算法有缺陷展示了数学和工程之上的区别.

[fn:3] The reduction steps in the cases where the exponent e is greater than 1 are based on the fact that, for any integers x , y , and m , we can find the remainder of x times y modulo m by computing separately the remainders of x modulo m and y modulo m , multiplying these, and then taking the remainder of the result modulo m . For instance, in the case where e is even, we compute the remainder of b^{e/2} modulo m , square this, and take the remainder modulo m . This technique is useful because it means we can perform our computation without ever having to deal with numbers much larger than m . (Compare [[Exercise 1.25:]] .)
[fn:3] 指数 e 大于 1 的情况的化简基于, 对于任何整数 x, y, 和 m, 可以分别计算 x 模 m 的和 y 模 m 的余数, 将它们相乘, 最后取它们模 m 的余数, 以找到 x 乘 y 模 m 的余数. 如, 当 e 是偶数时, 我们计算 b^{e/2}模 m 的余数, 平方它, 再取得模 m 的余. 这种技术意味着我们不需要处理比 m 大得多的数. (相对于 [[Exercise 1.25:]] .)

[fn:2] Pierre de Fermat (1601-1665) is considered to be the founder of modern number theory. He obtained many important number-theoretic results, but he usually announced just the results, without providing his proofs. Fermat’s Little Theorem was stated in a letter he wrote in 1640. The first published proof was given by Euler in 1736 (and an earlier, identical proof was discovered in the unpublished manuscripts of Leibniz). The most famous of Fermat’s results—known as Fermat’s Last Theorem—was jotted down in 1637 in his copy of the book Arithmetic (by the third-century Greek mathematician Diophantus) with the remark “I have discovered a truly remarkable proof, but this margin is too small to contain it.” Finding a proof of Fermat’s Last Theorem became one of the most famous challenges in number theory. A complete solution was finally given in 1995 by Andrew Wiles of Princeton University.
[fn:2] 皮埃尔·德·费马(1601-1665)被认为是现代数论的创始人. 他发现了许多重要的数论结果, 但通常只宣布, 而不证明. 费马小定理是在他 1640 年写的一封信中提出的. 第一个已发表的证明是由欧拉在 1736 年给出的(在莱布尼茨的未发表手稿中也发现了更早的相同证明). 费马最著名的结果---费马大定理---是在 1637 年在他的<<算术>>(由三世纪的希腊数学家丢番图所著)一书的抄本中写下的, 附注为: "我发现了一个真正了不起的证明, 但这里的空白太小, 写不下." 寻找费马大定理的证明成为了数论中最著名的挑战之一. 最终在 1995 年由普林斯顿大学的安德鲁·怀尔斯给出了一个完整的解.

[fn:1] If d is a divisor of n , then so is n / d . But d and n / d cannot both be greater than sqrt(n) .
[fn:1] 如果 d 是 n 的因子, 那么 n/d 也是 n 的因子. 但是 d 和 n/d 不能同时满足大于 sqrt(n).
